<?xml version="1.0" encoding="UTF-8" ?>
<class name="PIDController" inherits="Node" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/godotengine/godot/master/doc/class.xsd">
	<brief_description>
		A generalized PID controller node.
	</brief_description>
	<description>
		This node implements a generic Proportional, Integral, Derivative controller to drive a state to reach a target.

		If [member control_method] is set to [enum PIDController.ControlMethod.PID_CONTROL_AUTO_PROPERTY], the controller will automatically update a property of [member controlled_node] to drive it towards [member target].  The property must be specified in [member controlled_property].
		If [member control_method] is set to [enum PIDController.ControlMethod.PID_CONTROL_USER_SCRIPT], the user must call [method calculate_control_output] in their own scripts to get the control output and apply it to any arbitrary state variable they choose.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="advance">
			<return type="void" />
			<param index="0" name="delta" type="float" />
			<description>
				Advances the controller's state by [param delta] seconds.  This is called automatically by the engine when [member update_method] is set to [enum PIDController.UpdateMethod.PID_PROCESS_PHYSICS] or [enum PIDController.UpdateMethod.PID_PROCESS_IDLE].  If [member update_method] is set to [enum PIDController.UpdateMethod.PID_PROCESS_MANUAL], the user must call this method in their own scripts.
			</description>
		</method>
		<method name="calculate_control_output">
			<return type="Variant" />
			<param index="0" name="updated_value" type="Variant" />
			<param index="1" name="delta" type="float" />
			<description>
				Returns the PID controller's output to drive [param state_value] to [member target].  This method is automatically called when [member control_method] is [enum PIDController.ControlMethod.PID_CONTROL_AUTO_PROPERTY].  [param delta] should be the elapsed time since the method was previously called.
			</description>
		</method>
		<method name="reset_accumulated_error">
			<return type="void" />
			<description>
				Resets the accumulated error to zero.  This is helpful if you have a buildup of error that can cause overshoot due to the integral term.
			</description>
		</method>
		<method name="reset_state">
			<return type="void" />
			<description>
				Resets the controller's state to zero.  This is useful if you want to reset the controller without changing the target.
			</description>
		</method>
	</methods>
	<members>
		<member name="accumulated_error" type="Variant" setter="" getter="get_accumulated_error" default="0.0">
			(Read-only) The accumulated error calculated during the last call to [method calculate_control_output].  This is used for the integral term of the PID controller.
		</member>
		<member name="control_method" type="int" setter="set_control_method" getter="get_control_method" enum="PIDController.ControlMethod" default="0">
			Determines how the controller will be used.  See [enum ControlMethod].
		</member>
		<member name="control_output_limit" type="Variant" setter="set_control_output_limit" getter="get_control_output_limit" default="-1">
			This is the maximum control value returned by [method calculate_control_output].
		</member>
		<member name="controlled_node" type="NodePath" setter="set_controlled_node" getter="get_controlled_node" default="NodePath(&quot;&quot;)">
			The node that will have a property controlled by the PID controller in [enum ControlMethod.PID_CONTROL_AUTO_PROPERTY] mode.  This node must have a property with the name specified in [member controlled_property].
		</member>
		<member name="controlled_property" type="StringName" setter="set_controlled_property" getter="get_controlled_property" default="&amp;&quot;&quot;">
			The property that will be updated in [enum ControlMethod.PID_CONTROL_AUTO_PROPERTY] mode. Must be a property name of [member controlled_node].
		</member>
		<member name="d_gain" type="Variant" setter="set_d_gain" getter="get_d_gain" default="0.0">
			The derivative gain of the PID controller.  This is used to damp the response of the controller.
		</member>
		<member name="error" type="Variant" setter="" getter="get_error" default="0.0">
			(Read-only) The error calculated during the last call to [method calculate_control_output].
		</member>
		<member name="error_accumulation_decay" type="float" setter="set_error_accumulation_decay" getter="get_error_accumulation_decay" default="0.0">
			The decay rate of the accumulated error.  This is used to reduce the effect of accumulated error over time.  A value of 0.0 means no decay.
		</member>
		<member name="error_accumulation_limit" type="Variant" setter="set_error_accumulation_limit" getter="get_error_accumulation_limit" default="-1">
			The maximum value of the accumulated error.  If the accumulated error exceeds this value, it will be clamped to this value.  A value of -1 means no limit.
		</member>
		<member name="i_gain" type="Variant" setter="set_i_gain" getter="get_i_gain" default="0.0">
			The integral gain of the PID controller.  This is used to accumulate the error over time to drive the state towards the target in the face of persistent disturbances.
		</member>
		<member name="p_gain" type="Variant" setter="set_p_gain" getter="get_p_gain" default="0.0">
			The proportional gain of the PID controller.  This is used to drive the state towards the target based on the current error.
		</member>
		<member name="prevent_kick" type="bool" setter="enable_kick_prevention" getter="is_preventing_kick" default="false">
			When set to true, the controller will decrease the contribution of the derivative term if the target is changing quickly.  This prevents "kicks" in the output when the error changes suddenly due to a shifting target.
		</member>
		<member name="prevent_overshoot" type="bool" setter="enable_overshoot_prevention" getter="is_preventing_overshoot" default="false">
			When [member control_method] is set to [enum PIDController.ControlMethod.PID_CONTROL_AUTO_PROPERTY], this will prevent the controller from overshooting the target by clamping the output to the target value.  This is useful for preventing oscillations in the controlled property.
		</member>
		<member name="state_length" type="int" setter="set_state_length" getter="get_state_length" enum="PIDController.StateLength">
			When [member control_method] is set to [enum PIDController.ControlMethod.PID_CONTROL_USER_SCRIPT], this determines the length of the state vector that will be passed to [method calculate_control_output].  See [enum StateLength].
		</member>
		<member name="target" type="Variant" setter="set_target" getter="get_target" default="0.0">
			The target value that the controller will try to reach.  This is the desired state value that the controller will drive towards.
		</member>
		<member name="update_method" type="int" setter="set_update_method" getter="get_update_method" enum="PIDController.UpdateMethod" default="0">
			Determines when the controller runs when in [enum PIDController.ControlMethod.PID_CONTROL_AUTO_PROPERTY] mode.  See [enum UpdateMethod].
		</member>
		<member name="value_is_angle" type="bool" setter="set_value_is_angle" getter="get_value_is_angle" default="false">
			If true, all state variables are treated like angles and wrapped between zero and [code]TAU[/code].
		</member>
	</members>
	<constants>
		<constant name="PID_PROCESS_PHYSICS" value="0" enum="UpdateMethod">
			When [member update_method] is set to this, the controller will attempt to update the node's property every physics frame.
		</constant>
		<constant name="PID_PROCESS_IDLE" value="1" enum="UpdateMethod">
			When [member update_method] is set to this, the controller will attempt to update the node's property every idle (process) frame.
		</constant>
		<constant name="PID_PROCESS_PHYSICS_TOOL" value="2" enum="UpdateMethod">
			When [member update_method] is set to this, the controller will attempt to update the node's property every physics frame, even in the editor. This is useful for tools that need to visualize the controller's behavior in the editor.
		</constant>
		<constant name="PID_PROCESS_IDLE_TOOL" value="3" enum="UpdateMethod">
			When [member update_method] is set to this, the controller will attempt to update the node's property every idle (process) frame, even in the editor. This is useful for tools that need to visualize the controller's behavior in the editor.
		</constant>
		<constant name="PID_PROCESS_MANUAL" value="4" enum="UpdateMethod">
			When [member update_method] is set to this, the controller will not attempt automatic updates.  Instead, the user must call [method advance] in their own scripts.
		</constant>
		<constant name="PID_PROCESS_NONE" value="5" enum="UpdateMethod">
			When [member update_method] is set to this, the controller will not attempt automatic updates and will respond [method advance] calls.  This is useful to "pause" the controller without losing its state.
		</constant>
		<constant name="PID_CONTROL_AUTO_PROPERTY" value="0" enum="ControlMethod">
			When [member control_method] is set to this, the controller will automatically update a property of [member controlled_node] to drive it towards [member target].  The property must be specified in [member controlled_property].
		</constant>
		<constant name="PID_CONTROL_USER_SCRIPT" value="1" enum="ControlMethod">
			When [member control_method] is set to this, the user must call [method calculate_control_output] in their own scripts to get the control output and apply it to any arbitrary state variable they choose.
		</constant>
		<constant name="SCALAR" value="3" enum="StateLength">
			When [member state_length] is set to this, the state vector will be a single scalar value.
		</constant>
		<constant name="VECTOR2" value="5" enum="StateLength">
			When [member state_length] is set to this, the state vector will be a 2D vector with 2 components.
		</constant>
		<constant name="VECTOR3" value="9" enum="StateLength">
			When [member state_length] is set to this, the state vector will be a 3D vector with 3 components.
		</constant>
		<constant name="VECTOR4" value="12" enum="StateLength">
			When [member state_length] is set to this, the state vector will be a 4D vector with 4 components.
		</constant>
	</constants>
</class>
